using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace MemoryPack.Generator;

partial class MemoryPackGenerator
{
    static void Generate(TypeDeclarationSyntax syntax, Compilation compilation, in SourceProductionContext context)
    {
        var semanticModel = compilation.GetSemanticModel(syntax.SyntaxTree);

        var typeSymbol = semanticModel.GetDeclaredSymbol(syntax, context.CancellationToken);
        if (typeSymbol == null)
        {
            return;
        }

        // verify is partial
        if (!IsPartial(syntax))
        {
            // TODO:error line only single line...
            context.ReportDiagnostic(Diagnostic.Create(DiagnosticDescriptors.MustBePartial, syntax.GetLocation(), typeSymbol.Name));
            return;
        }

        var reference = new ReferenceSymbols(compilation);

        var typeMeta = new TypeMeta(typeSymbol, reference);

        var sw = new StringWriter();

        sw.WriteLine(@"
// <auto-generated/>
#nullable enable
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // Unreferenced label
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS8601 // Possible null reference assignment

using System;
using MemoryPack;
");

        var ns = typeMeta.Symbol.ContainingNamespace;
        if (!ns.IsGlobalNamespace)
        {
            sw.WriteLine($"namespace {ns};");
        }

        typeMeta.Emit(sw);

        var code = sw.ToString();

        // TODO:Full qualified?
        context.AddSource($"{typeMeta.Name}.MemoryPackFormatter.g.cs", code);
    }

    static bool IsPartial(TypeDeclarationSyntax typeDeclaration)
    {
        return typeDeclaration.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword));
    }
}

public class TypeMeta
{
    public INamedTypeSymbol Symbol { get; }
    public string Name { get; }
    public MemberMeta[] Members { get; }
    public bool AllowPrivate { get; }
    public bool IsValueType { get; set; }
    public bool IsUnmanagedType { get; }
    public bool IsUnion { get; }
    public bool IsRecord { get; }
    public bool IsInterfaceOrAbstract { get; }
    public IMethodSymbol? Consrtuctor { get; }
    public MethodMeta[] OnSerializing { get; }
    public MethodMeta[] OnSerialized { get; }
    public MethodMeta[] OnDeserializing { get; }
    public MethodMeta[] OnDeserialized { get; }

    public TypeMeta(INamedTypeSymbol symbol, ReferenceSymbols reference)
    {
        this.Symbol = symbol;
        this.Name = symbol.Name;

        var attr = symbol.GetAttributes().First(x => SymbolEqualityComparer.Default.Equals(x.AttributeClass, reference.MemoryPack_MemoryPackableAttribute));
        this.AllowPrivate = false;
        if (attr.ConstructorArguments.Length != 0)
        {
            this.AllowPrivate = (bool)attr.ConstructorArguments[0].Value!;
        }

        this.Members = symbol.GetMembers()
            .Where(x => x is (IFieldSymbol or IPropertySymbol) and { IsStatic: false, IsImplicitlyDeclared: false })
            .Where(x => AllowPrivate
                ? true // allows all accessibility
                : x.DeclaredAccessibility is Accessibility.Public)
            .Select(x => new MemberMeta(x, reference))
            .ToArray(); // TODO:GetMembers?TYpeMembers?CHeckOrder?
        this.IsValueType = symbol.IsValueType;
        this.IsUnmanagedType = symbol.IsUnmanagedType;
        this.IsInterfaceOrAbstract = symbol.IsAbstract; // TODO:IsInterface?
        this.IsRecord = symbol.IsRecord;
        this.Consrtuctor = null; // TODO:choose best-match constructor
        this.OnSerializing = Array.Empty<MethodMeta>(); // TODO:get methods
        this.OnSerialized = Array.Empty<MethodMeta>(); // TODO:get methods
        this.OnDeserializing = Array.Empty<MethodMeta>(); // TODO:get methods
        this.OnDeserialized = Array.Empty<MethodMeta>(); // TODO:get methods
    }

    public void Emit(StringWriter writer)
    {
        var serializeBody = "";
        var deserializeBody = "";
        if (IsUnmanagedType)
        {
            serializeBody = $$"""
        writer.WriteUnmanaged(value);
""";
            deserializeBody = $$"""
        reader.ReadUnmanaged(out value);
""";
        }
        else
        {
            serializeBody = $$"""
{{(!IsValueType ? $$"""
        if (value == null)
        {
            writer.WriteNullObjectHeader();
            return;
        }
""" : "")}}

        writer.WriteObjectHeader({{Members.Length}});
{{Members.Select(x => "        " + x.EmitSerialize()).NewLine()}}
""";
            // TODO: versioning check for count...
            deserializeBody = $$"""
        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default;
            return;
        }
        
        if (count != {{Members.Length}}) ThrowHelper.ThrowInvalidPropertyCount({{Members.Length}}, count);

{{Members.Select(x => "        " + x.EmitDeserialize()).NewLine()}}
""";
        }

        var classOrStructOrRecord = (IsRecord, IsValueType) switch
        {
            (true, true) => "record struct",
            (true, false) => "record",
            (false, true) => "struct",
            (false, false) => "class",
        };

        var nullable = IsValueType ? "" : "?";

        // TODO:Optimize pattern
        // TODO:register self array formatter(Unamanged or Array Formatter)
        // TODO:regsiter member's generics formatters(e.g. list, dict).
        // TODO:ctor

        var code = $$"""
partial {{classOrStructOrRecord}} {{Name}} : IMemoryPackable<{{Name}}>
{
    static {{Name}}()
    {
        MemoryPackFormatterProvider.Register<{{Name}}>();
    }

    static void IMemoryPackable.RegisterFormatter()
    {
        if (!MemoryPackFormatterProvider.IsRegistered<{{Name}}>())
        {
            MemoryPackFormatterProvider.Register(new {{Name}}Formatter());
        }
    }

    static void IMemoryPackable<{{Name}}>.Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, scoped ref {{Name}}{{nullable}} value)
    {
{{OnSerializing.Select(x => "        " + x.Emit()).NewLine()}}
{{serializeBody}}
{{OnSerialized.Select(x => "        " + x.Emit()).NewLine()}}
    }

    static void IMemoryPackable<{{Name}}>.Deserialize(ref MemoryPackReader reader, scoped ref {{Name}}{{nullable}} value)
    {
{{OnDeserializing.Select(x => "        " + x.Emit()).NewLine()}}
{{deserializeBody}}
{{(!IsUnmanagedType ? EmitDeserializeConstruction() : "")}}
{{OnDeserialized.Select(x => "        " + x.Emit()).NewLine()}}
    }

    sealed class {{Name}}Formatter : MemoryPackFormatter<{{Name}}>
    {
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, scoped ref {{Name}}{{nullable}} value)
        {
            writer.WritePackable(value);
        }

        public override void Deserialize(ref MemoryPackReader reader, scoped ref {{Name}}{{nullable}} value)
        {
            reader.ReadPackable(ref value);
        }
    }
}
""";

        writer.WriteLine(code);
    }

    string EmitDeserializeConstruction()
    {
        // all value is deserialized, __Name is exsits.
        // TODO:constructorMeta.Emit();
        return $$"""
        value = new {{Name}}()
        {
{{string.Join("," + Environment.NewLine, Members.Select(x => "            " + x.EmitConstruction()))}}
        };
""";
    }
}
public class MethodMeta
{
    public IMethodSymbol Symbol { get; }
    public string Name { get; }
    public bool IsStatic { get; }

    public MethodMeta(IMethodSymbol symbol)
    {
        this.Symbol = symbol;
        this.Name = symbol.Name;
        this.IsStatic = symbol.IsStatic;
    }

    public string Emit()
    {
        if (IsStatic)
        {
            return $"{Name}();";
        }
        else
        {
            return $"value.{Name}();";
        }
    }
}

public class MemberMeta
{
    public ISymbol Symbol { get; }
    public string Name { get; }
    public ITypeSymbol MemberType { get; }
    public bool IsField { get; }
    public bool IsProperty { get; }
    public bool IsRef { get; }
    public bool IsReadOnly { get; }
    public MemberKind Kind { get; }

    public MemberMeta(ISymbol symbol, ReferenceSymbols references)
    {
        this.Symbol = symbol;
        this.Name = symbol.Name;
        this.MemberType = symbol.ContainingType;

        if (symbol is IFieldSymbol f)
        {
            IsProperty = false;
            IsField = true;
            IsReadOnly = f.IsReadOnly;
            IsRef = f.RefKind == RefKind.Ref || f.RefKind == RefKind.RefReadOnly;
            MemberType = f.Type;

        }
        else if (symbol is IPropertySymbol p)
        {
            IsProperty = true;
            IsField = false;
            IsReadOnly = p.IsReadOnly;
            IsRef = p.RefKind == RefKind.Ref || p.RefKind == RefKind.RefReadOnly;
            MemberType = p.Type;
        }
        else
        {
            throw new Exception("member is not field or property.");
        }

        if (MemberType.IsUnmanagedType)
        {
            Kind = MemberKind.Unmanaged;
        }
        else if (MemberType.SpecialType == SpecialType.System_String)
        {
            Kind = MemberKind.String;
        }
        else if (MemberType.AllInterfaces.Any(x => x.IsGenericType && SymbolEqualityComparer.Default.Equals(x.ConstructUnboundGenericType(), references.MemoryPack_IMemoryPackable)))
        {
            Kind = MemberKind.MemoryPackable;
        }
        else
        {
            // TODO: check Collection / KnownType / NonSerializable
            Kind = MemberKind.KnownType; // TODO:????
        }
    }

    public string EmitSerialize()
    {
        switch (Kind)
        {
            case MemberKind.MemoryPackable:
                return $"writer.WritePackable(value.{Name});";
            case MemberKind.Unmanaged:
                return $"writer.WriteUnmanaged(value.{Name});";
            case MemberKind.String:
                return $"writer.WriteString(value.{Name});";
            case MemberKind.KnownType:
            case MemberKind.Collection: // TODO: inline optimization.
            case MemberKind.NonSerializable:
            default:
                return $"writer.WriteObject(value.{Name});";
        }
    }

    public string EmitDeserialize()
    {
        // TODO: MemberTypeName should be full qualified.
        // TODO: pass ref...?
        switch (Kind)
        {
            case MemberKind.MemoryPackable:
                return $"var __{Name} = reader.ReadPackable<{MemberType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>();";
            case MemberKind.Unmanaged:
                return $"reader.ReadUnmanaged<{MemberType.Name}>(out var __{Name});";
            case MemberKind.String:
                return $"var __{Name} = reader.ReadString();";
            case MemberKind.KnownType:
            case MemberKind.Collection: // TODO: inline optimization.
            case MemberKind.NonSerializable:
            default:
                return $"var __{Name} = reader.ReadObject<{MemberType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>();";
        }
    }

    public string EmitConstruction()
    {
        // TODO:if consructor parameter, don't emit.
        return $"{Name} = __{Name}";
    }
}


public enum MemberKind
{
    MemoryPackable,
    Unmanaged,
    KnownType,
    String,
    Collection, // TODO: +Array?
    NonSerializable
}
